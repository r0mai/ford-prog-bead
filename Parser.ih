// Generated by Bisonc++ V4.01.00 on Tue, 18 Mar 2014 19:13:24 +0100

    // Include this file in the sources of the class Parser.

// $insert class.h
#include "Parser.h"

#include <cstdlib>

inline void Parser::error(char const *msg)
{
    std::cerr << "Parser::error: " << msg << '\n';
	std::exit(1);
}

// $insert lex
inline int Parser::lex() {
    int ret = lexer.yylex();
    d_loc__.first_line = lexer.lineno();
	d_val__.text = new std::string(lexer.YYText());
    return ret;
}

inline void Parser::print()
{
//    print__();           // displays tokens if --print was specified
}

void Parser::declareVariable(const std::string& variableName, VariableData::Type type, int row) {
	if ( symbolTable.count(variableName) > 0 ) {
		//still leaks a bit.. whatever...
		error((std::string("Variable ") + variableName + " redeclared. Previous declaration: " + toString(symbolTable[variableName].row) + '\n').c_str());
	} else {
		symbolTable[variableName] = VariableData(d_loc__.first_line, type);
	}
}

void Parser::checkBoolOperator(VariableData::Type type) {
	if (type != VariableData::BOOL) {
		error("Operator type mismatch");
	}
}

void Parser::checkBoolBoolOperator(VariableData::Type type1, VariableData::Type type2) {
	if (type1 != VariableData::BOOL || type2 != VariableData::BOOL ) {
		error("Operator type mismatch");
	}
}

void Parser::checkBoolUnsignedOperator(VariableData::Type type1, VariableData::Type type2) {
	if (type1 != type2) {
		error("Operator type mismatch");
	}
}

void Parser::checkUnsignedUnsignedOperator(VariableData::Type type1, VariableData::Type type2) {
	if (type1 != VariableData::UNSIGNED || type2 != VariableData::UNSIGNED) {
		error("Operator type mismatch");
	}
}

    // Add here includes that are only required for the compilation
    // of Parser's sources.



    // UN-comment the next using-declaration if you want to use
    // int Parser's sources symbols from the namespace std without
    // specifying std::

//using namespace std;
